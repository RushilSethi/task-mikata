Notes on createPortal, Position-Based Rendering, and the Example Code
______________________________________________________________________
1. What is createPortal?
createPortal is a React feature that allows you to render a component outside of its parent component’s DOM hierarchy. It enables you to move the rendered content (or component) to a different part of the DOM while maintaining React’s component structure.

Example Usage of createPortal:
import ReactDOM from 'react-dom';

ReactDOM.createPortal(
  <div>This content is rendered outside the component's hierarchy!</div>,
  document.getElementById('portal-root')
);

Here, the content (<div>This content...</div>) is rendered inside the DOM element with the ID portal-root (which could be somewhere else on the page), instead of within its parent component.

Why use createPortal?
To render elements that need to be outside the normal flow of the DOM (e.g., modals, dropdowns, tooltips).
To avoid issues where a component like a modal would be clipped or hidden because of its position in the DOM (within scrollable containers).
______________________________________________________________________
2. Position-Based Rendering
Position-based rendering involves calculating the position of an element dynamically based on the viewport and other surrounding elements on the page. This is typically done by reading the bounding box (position and size) of the element and placing it accordingly.

For example, a dropdown needs to be rendered at the correct position relative to the button or input that triggers it. When you open the dropdown, you need to calculate its top and left position dynamically based on the button’s position on the screen.
______________________________________________________________________
3. What is Happening in the Code Example?
Let's break down the given code:
const [position, setPosition] = useState({ top: 0, left: 0 });

const toggleDropdown = (e) => {
  const buttonRect = e.currentTarget.getBoundingClientRect();
  setPosition({
    top: buttonRect.bottom + window.scrollY,
    left: buttonRect.left + window.scrollX,
  });
  setOpen((prev) => !prev);
};

=> State Declaration (useState):
const [position, setPosition] = useState({ top: 0, left: 0 });

=> Get Button Position (getBoundingClientRect):
const buttonRect = e.currentTarget.getBoundingClientRect();

e.currentTarget refers to the element that triggered the event (in this case, the button or trigger element for the dropdown).
getBoundingClientRect() is a built-in JavaScript method that returns the position and size of the element as a rectangular bounding box. The object returned contains properties like:
top: Distance from the top of the viewport.
left: Distance from the left of the viewport.
bottom: Distance from the bottom of the viewport.
right: Distance from the right of the viewport.
width & height: The dimensions of the element.
This allows us to know exactly where the button is located on the screen.

=> Set Position with Offsets:
setPosition({
  top: buttonRect.bottom + window.scrollY,
  left: buttonRect.left + window.scrollX,
});

buttonRect.bottom: Gets the position of the bottom of the button relative to the viewport.
window.scrollY: Adds the vertical scroll offset. This is important if the page has been scrolled down, as the position needs to account for the scrolled distance.
buttonRect.left: Gets the position of the left side of the button relative to the viewport.
window.scrollX: Adds the horizontal scroll offset, similar to scrollY.

So, the dropdown’s top will be placed just below the button (buttonRect.bottom + window.scrollY), and the left will align with the left side of the button (buttonRect.left + window.scrollX).
______________________________________________________________________
4. What’s Happening with the Position Calculation?
When the user clicks on the button (trigger), the toggleDropdown function is called.
Inside this function, the getBoundingClientRect() method calculates the position of the button in the viewport, and we store the top and left values.
We then adjust the position of the dropdown accordingly (based on the button’s position) and update the state using setPosition.
This allows us to position the dropdown dynamically each time it opens, based on the current position of the button or trigger element.






